//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src: url('../fonts/#{$file_name}.woff') format('woff'), url('../fonts/#{$file_name}.woff2') format('woff2');
    font-weight: #{$weight};
    font-style: #{$style};
  }
}

//Адаптивный шрифт
@mixin adaptiv-font($pcSize, $mobSize, $maxSize) {
  $addSize: $pcSize - $mobSize;
  @if $maxSize==1 {
    //Только если меньше контейнера
    font-size: $pcSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  } @else if $maxSize==2 {
    //Только если больше контейнера
    font-size: $pcSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  } @else {
    //Всегда
    font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
  }
}

//Адаптивное свойство
@mixin adaptiv-value($indentType, $pcSize, $mobSize, $maxSize) {
  $addSize: $pcSize - $mobSize;
  @if $maxSize==1 {
    //Только если меньше контейнера
    #{$indentType}: $pcSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$indentType}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  } @else if $maxSize==2 {
    //Только если больше контейнера
    #{$indentType}: $pcSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$indentType}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  } @else {
    //Всегда
    #{$indentType}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
  }
}

@mixin anim($time, $delay) {
  transition: all $time ease $delay;
  -webkit-transition: all $time ease $delay;
  -moz-transition: all $time ease $delay;
  -ms-transition: all $time ease $delay;
  -o-transition: all $time ease $delay;
}
@mixin anim_cubic($time, $delay) {
  transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
  -webkit-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
  -moz-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
  -ms-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
  -o-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
}
@mixin animate($name, $time, $infinite, $type) {
  animation: $name $time + s $infinite $type;
  -webkit-animation: $name $time + s $infinite $type;
  -moz-animation: $name $time + s $infinite $type;
  -o-animation: $name $time + s $infinite $type;
}
@mixin rotate($deg) {
  transform: rotate($deg);
  -moz-transform: rotate($deg);
  -ms-transform: rotate($deg);
  -webkit-transform: rotate($deg);
  -o-transform: rotate($deg);
}
@mixin scale($num) {
  transform: scale($num);
  -moz-transform: scale($num);
  -ms-transform: scale($num);
  -webkit-transform: scale($num);
  -o-transform: scale($num);
}
@mixin skew($num) {
  transform: skewX($num);
  -webkit-transform: skewX($num);
  -moz-transform: skewX($num);
  -ms-transform: skewX($num);
  -o-transform: skewX($num);
}
@mixin cnt($h) {
  display: flex;
  flex-direction: column;
  height: $h;
  text-align: center;
  align-items: stretch;
  justify-content: center;
}
@mixin tr($x, $y, $z) {
  transform: translate3d($x, $y, $z);
  -webkit-transform: translate3d($x, $y, $z);
  -ms-transform: translate3d($x, $y, $z);
  -o-transform: translate3d($x, $y, $z);
  -moz-transform: translate3d($x, $y, $z);
}
@mixin flexbox() {
  display: flex;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  font-size: 0;
}
@mixin flexboxinline() {
  display: inline-flex;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flex;
  display: -o-inline-flex;
}
@mixin flexorder($val) {
  order: $val;
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
}
